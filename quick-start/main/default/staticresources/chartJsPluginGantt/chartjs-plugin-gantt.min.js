!(function () {
  return function t(e, i, n) {
    function o(l, a) {
      if (!i[l]) {
        if (!e[l]) {
          var s = 'function' == typeof require && require;
          if (!a && s) return s(l, !0);
          if (r) return r(l, !0);
          var c = new Error("Cannot find module '" + l + "'");
          throw ((c.code = 'MODULE_NOT_FOUND'), c);
        }
        var u = (i[l] = { exports: {} });
        e[l][0].call(
          u.exports,
          function (t) {
            return o(e[l][1][t] || t);
          },
          u,
          u.exports,
          t,
          e,
          i,
          n
        );
      }
      return i[l].exports;
    }
    for (var r = 'function' == typeof require && require, l = 0; l < n.length; l++) o(n[l]);
    return o;
  };
})()(
  {
    1: [
      function (t, e, i) {
        'use strict';
        Object.defineProperty(i, '__esModule', { value: !0 }),
          (i.GanttController = function (t) {
            t.controllers.gantt = t.DatasetController.extend({
              dataElementType: n.Rect,
              _prepareData: function (t, e) {
                return { x: o.Utils.extendValue(t.x, e._width), y: o.Utils.extendValue(t.y, e._height) };
              },
              _calcBounds: function (t, e) {
                const i = t.getPixelForValue(e.from),
                  n = t.getPixelForValue(e.to),
                  r = { from: i, to: n };
                return o.Utils.normalize(r), (r.size = r.to - r.from), r;
              },
              update: function (e) {
                const i = this.getMeta(),
                  n = this.getDataset(),
                  l = this.getScaleForId(i.xAxisID),
                  a = this.getScaleForId(i.yAxisID);
                (n._width = o.Utils.convertSize(l, t.helpers.valueOrDefault(n.width, r.gantt.width))),
                  (n._height = o.Utils.convertSize(a, t.helpers.valueOrDefault(n.height, r.gantt.height)));
                const s = r.global.elements.gantt;
                n._view = {
                  borderWidth: n.borderWidth || s.borderWidth,
                  borderColor: n.borderColor || s.borderColor,
                  backgroundColor: n.backgroundColor || s.backgroundColor
                };
                const c = i.data || [];
                for (let t = 0; t < c.length; t++) this.updateElement(c[t], t, e);
              },
              updateElement: function (t, e, i) {
                const n = this.getMeta(),
                  r = this.getDataset(),
                  l = this.index,
                  a = this.getScaleForId(n.xAxisID),
                  s = this.getScaleForId(n.yAxisID),
                  c = r._view,
                  u = r.data[e];
                (t._xScale = a), (t._yScale = s), (t._datasetIndex = l), (t._index = e);
                const d = this._prepareData(u, r);
                (t._model = {
                  rect: { x: this._calcBounds(a, d.x), y: this._calcBounds(s, d.y) },
                  borderWidth: u.borderWidth || c.borderWidth,
                  borderColor: u.borderColor || c.borderColor,
                  backgroundColor: u.backgroundColor || c.backgroundColor
                }),
                  (t._model.x = o.Utils.getMiddle(t._model.rect.x)),
                  (t._model.y = o.Utils.getMiddle(t._model.rect.y)),
                  t.pivot();
              }
            });
          });
        var n = t('../elements/rect'),
          o = t('../core/utils');
        const r = Chart.defaults;
        (r.gantt = {
          height: 5,
          width: 5,
          scales: {
            xAxes: [{ id: 'x-axis-1', type: 'linear-gantt', position: 'bottom' }],
            yAxes: [{ id: 'y-axis-1', type: 'linear-gantt', position: 'left' }]
          },
          tooltips: {
            callbacks: {
              title: function () {
                return '';
              },
              label: function (t) {
                return '(' + t.xLabel + ', ' + t.yLabel + ')';
              }
            }
          }
        }),
          (r.global.elements.gantt = {
            borderWidth: 1,
            borderColor: r.global.defaultColor,
            backgroundColor: r.global.defaultColor
          });
      },
      { '../core/utils': 2, '../elements/rect': 3 }
    ],
    2: [
      function (t, e, i) {
        'use strict';
        Object.defineProperty(i, '__esModule', { value: !0 }), (i.Utils = void 0);
        const n = {
          _parseInterval: function (t) {
            if ('number' == typeof t) return t;
            if ('string' == typeof t) {
              const e = t
                .trim()
                .toLowerCase()
                .split(/\s*(\d+)\s*/);
              let i = 'ms';
              const n = {};
              for (let t = e.length - 1; t > 0; t--) {
                const o = parseFloat(e[t]);
                isFinite(o) ? (n[i] = o) : (i = e[t]);
              }
              t = n;
            }
            const e = { ms: 1, s: 1e3, m: 6e4, h: 36e5, d: 864e5 };
            let i = 0;
            for (let n in t) e[n] && (i += t[n] * e[n]);
            return i;
          },
          isRange: function (t) {
            return void 0 !== t.from && void 0 !== t.to;
          },
          getValue: function (t, e) {
            if ('string' == typeof t) return +t;
            if (null == t) return NaN;
            if ('number' == typeof t && !isFinite(t)) return NaN;
            if (t) {
              const i = e.isHorizontal() ? t.x : t.y;
              if (void 0 !== i) return this.getValue(i, e);
            }
            return t;
          },
          _incMilliseconds: function (t, e) {
            const i = new Date(t);
            return i.setMilliseconds(i.getMilliseconds() + e), i;
          },
          extendValue: function (t, e) {
            if (this.isRange(t)) return t;
            if (!isFinite(t)) return NaN;
            const i = e / 2;
            return t instanceof Date
              ? { from: this._incMilliseconds(t, -i), to: this._incMilliseconds(t, i) }
              : { from: t - i, to: t + i };
          },
          isTimeScale: function (t) {
            return t.isTime || 'time' === t.type;
          },
          convertSize: function (t, e) {
            return this.isTimeScale(t) ? this._parseInterval(e) : e;
          },
          normalize: function (t) {
            if (t.from > t.to) {
              const e = t.from;
              (t.from = t.to), (t.to = e);
            }
            return t;
          },
          getMiddle: function (t) {
            return (t.from + t.to) / 2;
          }
        };
        i.Utils = n;
      },
      {}
    ],
    3: [
      function (t, e, i) {
        (function (e) {
          'use strict';
          Object.defineProperty(i, '__esModule', { value: !0 }), (i.Rect = void 0);
          var n = 'undefined' != typeof window ? window.Chart : void 0 !== e ? e.Chart : null;
          t('../core/utils');
          const o = n.Chart.Element.extend({
            inRange: function (t, e) {
              const i = this._view.rect;
              return t >= i.x.from && t <= i.x.to && e >= i.y.from && e <= i.y.to;
            },
            getCenterPoint: function () {
              const t = this._view;
              return { x: t.x, y: t.y };
            },
            getArea: function () {
              const t = this._view.rect;
              return t.x.size * t.y.size;
            },
            draw: function () {
              const t = this._view,
                e = this._chart.ctx;
              e.save(),
                (e.lineWidth = t.borderWidth),
                (e.strokeStyle = t.borderColor),
                (e.fillStyle = t.backgroundColor);
              const i = t.rect;
              e.fillRect(i.x.from, i.y.from, i.x.size, i.y.size),
                e.strokeRect(i.x.from, i.y.from, i.x.size, i.y.size),
                e.restore();
            }
          });
          i.Rect = o;
        }.call(
          this,
          'undefined' != typeof global
            ? global
            : 'undefined' != typeof self
            ? self
            : 'undefined' != typeof window
            ? window
            : {}
        ));
      },
      { '../core/utils': 2 }
    ],
    4: [
      function (t, e, i) {
        (function (e) {
          'use strict';
          var i = 'undefined' != typeof window ? window.Chart : void 0 !== e ? e.Chart : null,
            n = t('./controllers/gantt'),
            o = t('./scales/linear-gantt'),
            r = t('./scales/time-gantt');
          (0, n.GanttController)(i.Chart), (0, o.LinearGanttScale)(i.Chart), (0, r.TimeGanttScale)(i.Chart);
        }.call(
          this,
          'undefined' != typeof global
            ? global
            : 'undefined' != typeof self
            ? self
            : 'undefined' != typeof window
            ? window
            : {}
        ));
      },
      { './controllers/gantt': 1, './scales/linear-gantt': 5, './scales/time-gantt': 7 }
    ],
    5: [
      function (t, e, i) {
        'use strict';
        Object.defineProperty(i, '__esModule', { value: !0 }),
          (i.LinearGanttScale = function (t) {
            const e = t.scaleService.getScaleConstructor('linear').extend({
              getRightValue: function (t) {
                return n.ScaleUtils.getRightValue(this, t);
              },
              determineDataLimits: function () {
                n.ScaleUtils.determineDataLimits(this), this.handleTickRangeOptions();
              },
              getLabelForIndex: function (t, e) {
                return n.ScaleUtils.getLabelForIndex(this, t, e);
              }
            });
            n.ScaleUtils.extendScale(t, 'linear', 'linear-gantt', e);
          });
        var n = t('./scale-utils');
      },
      { './scale-utils': 6 }
    ],
    6: [
      function (t, e, i) {
        'use strict';
        Object.defineProperty(i, '__esModule', { value: !0 }), (i.ScaleUtils = void 0);
        var n = t('../core/utils');
        const o = Chart.helpers,
          r = {
            getRightValue: function (t, e) {
              return n.Utils.isRange(e) ? n.Utils.getMiddle(e) : t.__proto__.__proto__.getRightValue.call(t, e);
            },
            determineDataLimits: function (t) {
              const e = t.chart,
                i = Chart.defaults.gantt,
                r = t.isHorizontal();
              (t.min = null),
                (t.max = null),
                o.each(e.data.datasets, function (l, a) {
                  const s = e.getDatasetMeta(a);
                  if (
                    e.isDatasetVisible(a) &&
                    (function (e) {
                      return r ? e.xAxisID === t.id : e.yAxisID === t.id;
                    })(s)
                  ) {
                    const e = r
                      ? n.Utils.convertSize(t, o.valueOrDefault(l.width, i.width))
                      : n.Utils.convertSize(t, o.valueOrDefault(l.height, i.height));
                    o.each(l.data, function (i, o) {
                      if (s.data[o].hidden) return;
                      const r = n.Utils.extendValue(n.Utils.getValue(i, t), e);
                      ('object' != typeof r && isNaN(r)) ||
                        (n.Utils.normalize(r),
                        (null === t.min || t.min > r.from) && (t.min = r.from),
                        (null === t.max || t.max < r.to) && (t.max = r.to));
                    });
                  }
                });
            },
            getLabelForIndex: function (t, e, i) {
              const o = t.chart.data.datasets[i].data[e],
                r = t.isHorizontal() ? o.x : o.y;
              return n.Utils.isRange(r) ? r.from + '~' + r.to : r;
            },
            extendScale: function (t, e, i, n) {
              const o = t.scaleService,
                r = o.getScaleDefaults(e);
              o.registerScaleType(i, n, r);
            }
          };
        i.ScaleUtils = r;
      },
      { '../core/utils': 2 }
    ],
    7: [
      function (t, e, i) {
        'use strict';
        Object.defineProperty(i, '__esModule', { value: !0 }),
          (i.TimeGanttScale = function (t) {
            const e = t.scaleService.getScaleConstructor('time').extend({
              isTime: !0,
              getRightValue: function (t) {
                return n.ScaleUtils.getRightValue(this, t);
              },
              determineDataLimits: function () {
                this.__proto__.__proto__.determineDataLimits.call(this), n.ScaleUtils.determineDataLimits(this);
              },
              getLabelForIndex: function (t, e) {
                return n.ScaleUtils.getLabelForIndex(this, t, e);
              }
            });
            n.ScaleUtils.extendScale(t, 'time', 'time-gantt', e);
          });
        var n = t('./scale-utils');
      },
      { './scale-utils': 6 }
    ]
  },
  {},
  [4]
);
